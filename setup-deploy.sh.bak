#!/usr/bin/env bash
# setup-deploy.sh ‚Äî Setup & Deploy tudo-em-um
set -o pipefail

bold(){ printf "\033[1m%s\033[0m\n" "$*"; }
info(){ printf "ÔøΩÔøΩ %s\n" "$*"; }
good(){ printf "‚úÖ %s\n" "$*"; }
warn(){ printf "‚ö†Ô∏è  %s\n" "$*"; }
err(){ printf "üõë %s\n" "$*" 1>&2; }
ask(){ read -r -p "$1" REPLY && echo "$REPLY"; }
is_codespace(){ [ -n "${CODESPACES:-}" ] || [ -n "${GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN:-}" ]; }

vercomp() { # 1 if $1>$2 ; 2 if $1<$2 ; 0 eq
  local v1 v2 IFS=.
  if [ -n "$ZSH_VERSION" ]; then
    v1=(${(s:.:)1})
    v2=(${(s:.:)2})
    local len=$(( ${#v1[@]} > ${#v2[@]} ? ${#v1[@]} : ${#v2[@]} ))
    for ((i=1;i<=len;i++)); do
      local a=${v1[i]:-0}
      local b=${v2[i]:-0}
      ((a>b)) && return 1
      ((a<b)) && return 2
    done
  else
    v1=(${1//./ })
    v2=(${2//./ })
    local len=${#v1[@]}
    [ ${#v2[@]} -gt $len ] && len=${#v2[@]}
    for ((i=0;i<$len;i++)); do
      local a=${v1[i]:-0}
      local b=${v2[i]:-0}
      ((10#$a>10#$b)) && return 1
      ((10#$a<10#$b)) && return 2
    done
  fi
  return 0
}

setup() {
  bold "===== üö¶ Setup Autom√°tico do Projeto ====="
  local NODE_REQUIRED="18.0.0"

  if command -v node >/dev/null 2>&1; then
    local NV
    NV=$(node -v | sed 's/v//')
    info "Node.js: v$NV"
    vercomp "$NV" "$NODE_REQUIRED"
    case $? in
      2) warn "Node < $NODE_REQUIRED. Vou usar NVM." ;;
      0|1) good "Node OK (>= $NODE_REQUIRED)" ;;
    esac
  else
    warn "Node n√£o encontrado."
  fi

  if ! command -v node >/dev/null 2>&1 || \
     ! command -v npm  >/dev/null 2>&1 || \
     [ "$(vercomp "$(node -v | sed 's/v//')" "$NODE_REQUIRED"; echo $?)" -eq 2 ]; then
    warn "Instalando Node via NVM (LTS)..."
    if ! command -v nvm >/dev/null 2>&1; then
      curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
    else
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
    fi
    nvm install --lts
    nvm use --lts
  fi

  good "npm v$(npm -v) OK"

  bold "üì¶ npm install"
  npm install

  # Se precisar de Supabase local, descomente:
  # if command -v supabase >/dev/null 2>&1; then
  #   bold "üêò supabase start"
  #   supabase start
  # fi

  bold "üöÄ npm run dev (log em /tmp/dev.log)"
  npm run dev &>/tmp/dev.log & DEV_PID=$!

  local PORT="${PORT:-8080}"
  sleep 2
  if is_codespace; then
    info "Codespace: abra pela aba PORTS -> http://localhost:$PORT"
  else
    if command -v xdg-open >/dev/null 2>&1; then
      xdg-open "http://localhost:$PORT" >/dev/null 2>&1 &
    elif command -v open >/dev/null 2>&1; then
      open "http://localhost:$PORT" >/dev/null 2>&1 &
    else
      info "Acesse: http://localhost:$PORT"
    fi
  fi

  good "Dev rodando (PID: $DEV_PID)"
  bold "===== ‚úÖ Setup finalizado ====="
}

deploy() {
  bold "===== üöÄ Commit, Push e Deploy Netlify ====="

  if ! command -v git >/dev/null 2>&1; then
    err "git n√£o encontrado"
    exit 1
  fi

  local BRANCH
  BRANCH=$(git rev-parse --abbrev-ref HEAD)
  info "Branch: $BRANCH"
  git status

  if [ "$BRANCH" != "main" ] && [ "$BRANCH" != "master" ]; then
    local c
    c=$(ask "‚ö†Ô∏è  N√£o est√° em main/master. Continuar? (s/n): ")
    if [[ ! "$c" =~ ^[sSyY]$ ]]; then
      err "Abortado."
      return 1
    fi
  fi

  git add -A

  if git diff --cached --quiet && git diff --quiet; then
    warn "Nada para commitar."
  else
    local files types="" feature="" ui=false backend=false doc=false test=false config=false deps=false
    files=$(git diff --cached --name-only)

    while read -r f; do
      [[ "$f" =~ (feature|feat) ]] && feature="feat"
      [[ "$f" =~ (ui|App|Sidebar|Theme|Layout) || "$f" =~ \.s?css$ ]] && ui=true
      [[ "$f" =~ (api|service|lib|supabase|backend) || ( "$f" =~ \.ts$ && ! "$f" =~ \.d\.ts$ ) ]] && backend=true
      [[ "$f" =~ (\.md$|README|docs/) ]] && doc=true
      [[ "$f" =~ (test|spec|e2e) || "$f" =~ \.test\.(js|ts|tsx)$ ]] && test=true
      [[ "$f" =~ (config|\.json$|\.toml$|\.yml$|\.lock$|\.env) ]] && config=true
      [[ "$f" =~ (package.json|package-lock.json|yarn.lock|pnpm-lock.yaml|bun.lockb) ]] && deps=true
    done <<< "$files"

    [ -n "$feature" ] && types+="feat: "
    $ui      && types+="ui "
    $backend && types+="backend "
    $doc     && types+="docs "
    $test    && types+="test "
    $config  && types+="config "
    $deps    && types+="deps "

    local short n
    short=$(echo "$files" | head -5 | tr '\n' ',' | sed 's/,$//')
    n=$(echo "$files" | wc -l | tr -d ' ')
    [ "$n" -gt 5 ] && short="$short e mais $((n-5)) arquivos"

    local suggestion
    suggestion="${types:-chore: }atualiza√ß√µes em $short"

    echo "Sugest√£o: \"$suggestion\""
    local msg
    msg=$(ask "Enter p/aceitar ou digite outra mensagem: ")
    [ -z "$msg" ] && msg="$suggestion"

    git commit -m "$msg"
    git push origin "$BRANCH"
    good "Commit + push OK"
  fi

  local d
  d=$(ask "Rodar deploy Netlify agora? (s/n): ")
  if [[ "$d" =~ ^[sSyY]$ ]]; then
    if command -v netlify >/dev/null 2>&1; then
      netlify deploy --prod
    else
      npx -y netlify-cli deploy --prod
    fi
    good "Deploy acionado!"
  else
    info "Sem deploy manual. Se tiver CI no Netlify, o push j√° dispara."
  fi

  bold "===== üèÅ Deploy finalizado ====="
}

help() {
  cat <<'HLP'
Uso:
  ./setup-deploy.sh setup
  ./setup-deploy.sh deploy
  ./setup-deploy.sh help

Dicas:
  PORT=5173 setup  -> se sua app usar outra porta
  Em Codespaces, use a aba PORTS
HLP
}

case "${1:-help}" in
  setup)  setup ;;
  deploy) deploy ;;
  help|--help|-h) help ;;
  *) err "Comando desconhecido: $1"; echo; help; exit 1 ;;
esac
